########### CONFIG BASICA ########################################################################

// instalar o webpack, mas antes ter o package.json
$ npm i --save-dev webpack webpack-cli

// o comando abaixo ira agrupar todo o codigo, otimizar e mais. Utilizar o npx é a mesma coisa
// que utilizar o node_modules/.bin/webpack. Facilita para utilizarmos cli's instaladas localmente
// ao invés de globalmente. O -o significa que o script original terá a saida dos codigos distribuidos
// para o arquivo de nome main.js. 
$ npx webpack ./js/script.js -o ./main.js

// Quando se tem o webpack.config.js configurado não precisa deixar esse comando no 
// script do npm run, pois já é definido no proprio webpack, ficando somente assim no package.json
// em caso de desenvolvimento, no caso das alterações precisarem ser observadas utilizamos o watch
"script": {
    "build": "webpack --mode production",
    "dev": "webpack --mode development --watch"
}

// no caso de navegadores antigos a função fetch api como outras não funcionam, então instalamos 
// esse recurso só para garantir e então adicionamos no webpack

$ npm install whatwg-fetch --save

// o arquivo de configuração do webpack fica assim:

const path = require("path");

module.exports = {
  // em entry se pode passar plugins a serem utilizados
  // no nosso caso passamos o @babel/polifill que automaticamento inclui os demais pacotes
  // que foram instalados no package.json, assim como o e whatwg-fetch
  entry: ["@babel/polyfill", "whatwg-fetch", "./js/script.js"],
  output: {
    path: path.resolve(__dirname, "./"),
    filename: "main.js",
  },
};
------------------------------------------------------------------------------------------------------
########### CONFIG AVANÇADA ########################################################################
// Primeiro baixar os pacotes webpack 
>> webpack :  4.41.5
>> webpack-cli : 3.3.10
$ npm i -D webpack webpack-cli @webpack-cli/init@0.2.2

// no caso de ser o webpack 5
$ npm install --save-dev webpack  webpack-cli  @webpack-cli/init

// apos baixar, inicializar a configuração do webpack com o comando abaixo
$ npx webpack-cli init

// para criar carregamento de multiplos arquivos html (devo ler e entender esse plugin)
$ npm i -D html-webpack-plugin

new HtmlWebpackPlugin({
      title: "Home",
      template: "./views/index.html",
      filename: "index.html",
    }),
    new HtmlWebpackPlugin({
      title: "About",
      template: "./views/about.html",
      filename: "about.html",
    }),
// instalei o codigo abaixo, ele aponta para o dist, comprime e direciona a execução para uma porta configurada
// atraves de um objeto devServer do arquivo do webpack 
// apos a instalação fazer a inclusao no package.json em scripts 

"start": "webpack-dev-server",
"app:dev": "concurrently npm:build npm:start"

$ npm i -D webpack-dev-server concurrently

---------- NESSA VERSAO O DEV SERVER FUNCIONOU ----------------------
"webpack": "4.29.5",
"webpack-cli": "4.2.0",
"webpack-dev-server": "3.11.0"
---------------------------------------

// apos configurado e instalado deve executar o comando npm run app:dev

###############################################################################################33

// configurando separadamente babel
$ npm i -D babel-loader @babel/core @babel/preset-env

// no webpack config
module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        loader: "babel-loader",
      }, 

    
$ npm i -D babel-minify-webpack-plugin

// ******** IMPORTANTE
// AGRUPAR COMANDOS COM O concurrently. Usar esse comando package.json como no exemplo abaixo.
// podemos observar que ao executarmos no terminal o comando npm run app:dev ele irá agrupar todos
// os comandos anteriores de forma muito mais organizada
"scripts": {
    "clear": "rimraf dist/",
    "build": "webpack -w",
    "serve": "webpack serve",
    "app:dev":"concurrently npm:clear npm:build npm:serve ",
